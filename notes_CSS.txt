---------------------------------||| Статьи |||------------------------------------------

Эволюция CSS: от CSS, SASS, BEM и CSS–модулей до styled-components
https://habr.com/ru/company/vk/blog/319956/

БЭМ
https://ru.bem.info/methodology/css/

----------------------||| Применение CSS |||-----------------------------------




--------------------< Внешняя таблица стилей >---------------------------------

<html>
  <head>
    ...
    <link rel="stylesheet" href="styles.css">
  </head>
	...
</html>


---------------------< Внутренняя таблица стилей >-----------------------------

<html>
  <head>
    <meta charset="utf-8">
    <title>Я пробую писать CSS</title>
    <style>
      h1 {
        color: blue;
        background-color: yellow;
        border: 1px solid black;
      }

      p {
        color: red;
      }
    </style>
  </head>
  ...
</html>


---------------------------< Встроенные стили >--------------------------------

<html>
  <head>
	...
  </head>
  <body>
    <h1 style="color: blue;background-color: yellow;border: 1px solid black;">Привет!</h1>
    <p style="color:red;">Это мой первый опыт в CSS</p>
  </body>
</html>


_______________________________________________________________________________

--------------------------||| Добавление CSS |||-------------------------------

------------------------------| Селекторы |------------------------------------

h1 - это селектор тегов
a:link - это селектор ссылок.
.manythings - это селектор классов (классы применяются тогда, когда необходимо применить правило к нескольким элементам).
#onething - это селектор идентификаторов id.
* - универсальный селектор.
.box p - селектор потомков.
.box p:first-child - селектор потомков + селектор псевдоклассов.
h1, h2, .intro - пречисление селекторов.

-----------------------| Стилизация HTML-элементов |---------------------------

p {
  color: green;
}
Стиль применится ко всем элементам <p>


p, li {
    color: green;
}
Можно применить сразу к нескольким элементам


-------------------< Сочетание селекторов и комбинаторов >---------------------

article p span { ... }
Выбирает любой <span> внутри <p>, который находится внутри <article>

h1 + ul + p { ... }
выбирает любой <p>, который идет сразу после <ul>, который идет сразу после <h1>

body h1 + p .special { ... }
Это будет стиль любого элемента с классом special, который находится внутри <p>, который приходит сразу после <h1>, который находится внутри <body>


-----------------------------< Стилизация Классов >----------------------------

<ul>
  <li>Элемент один</li>
  <li class="special">Элемент два</li>
  <li>Элемент <em>три</em></li>
</ul>


.special {
  color: orange;
  font-weight: bold;
}
Стиль для класса special


li.special {
  color: orange;
  font-weight: bold;
}
Предназначаться для любого элемента li, который имеет класс special


li.special,
span.special {
  color: orange;
  font-weight: bold;
}
Можно сочетать и так


li em {
  color: rebeccapurple;
}
Этот селектор выберет любой элемент <em>, который находится внутри (потомка) <li>

h1 + p {
  font-size: 200%;
}
Следующи параграф за заголовком h1 будет стилизован так. Остальный по умолчанию.



------------------------< Стизизация по ID >-----------------------------------
#second-button {
  color: orange;
  font-weight: bold;
}
Стиль будет применён к одному элементу с id="second-button"


---------------------------< Псевдоклассы >------------------------------------
Стилизация элементов на основе состояния
a:link {
  color: pink;
}
Стиль для ссылки


:active - соответствует элементу в момент, когда он активируется пользователем
:any
:any-link
:checked - элементы radio, checkbox, или <option> (внутри <select>), которые выбраны или включены.
:default
:defined
:dir()
:disabled
:empty
:enabled
:first
:first-child - находит любой элемент, являющийся первым в своём родителе.
:first-of-type
:fullscreen
:focus - применяется, когда элемент (такой как input формы) получает фокус.
:hover - срабатывает при наведении мышью
:indeterminate
:in-range
:invalid
:lang()
:last-child - находит любой элемент, являющийся последним в его родителе
:last-of-type
:left
:link - позволяет вам выбирать ссылки внутри элементов
:not()
:nth-child() - находит один или более элементов, основываясь на их позиции среди группы соседних элементов.
:nth-last-child()
:nth-last-of-type()
:nth-of-type()
:only-child
:only-of-type
:optional
:out-of-range
:read-only
:read-write
:required
:right
:root
:scope (en-US)
:target
:valid
:visited - ссылки, которые были посещены

Подробнее: https://developer.mozilla.org/ru/docs/Web/CSS/Pseudo-classes


-----------------------||| Стилизация отдельных типов элементов |||----------------------
--------------------------------------< Ссылки >-----------------------------------------
#Ссылки
a:link {}
a:visited {}
a:hover {}
a:focus {}
a:active {}

a {
	outline: none | ; /*Свойства контура
	outline: green solid 3px; */
	
	text-decoration: none; /*Убирает подчёркивание ссылки
	text-decoration: underline dotted red;
	
	
		
}


_______________________________________________________________________________

----------------------------||| Медиазапросы |||-------------------------------

CSS3 медиа запросы или (media queries) – это определенный набор стилей и логических выражений, которые позволяют применять различные стили в зависимости от выполнения каких то дополнительных условий.

Медиазапросы используются в тех случаях , когда нужно применить разные CSS-стили, для разных устройств по типу отображения (например: для принтера, монитора или смартфона), а также конкретных характеристик устройства  (например: ширины окна просмотра браузера), или внешней среды (например: внешнее освещение).

-------------------------------| Подключение|----------------------------------
Можно подключать в html коде:
<link rel="stylesheet" media="only screen and (color)" href="modern-styles.css" />

@media print { ... }



@media screen and (min-width: 30em) and (orientation: landscape) { ...  }
Стили для экранов с минимальной шириной 30em и горизонтальной ориенитацией.



-----< Сочетание селекторов и комбинаторов >-----



_________________________________________________________________________________________

---------------------------------||| display: flex |||-----------------------------------
#flex #display

Полное руководство по Flexbox: 
https://habr.com/ru/post/467049/

Документация:
https://developer.mozilla.org/ru/docs/Learn/CSS/CSS_layout/Flexbox


-------------------| Свойства для Родителя (flex контейнер) |----------------------------
.container {
	
	display: flex; /* or inline-flex 
	Определяем flex контейнер */
		
		
	flex-direction: row | row-reverse | column | column-reverse; /*
	Направление flex элементов (по умолчанию row) */
		
		
	flex-wrap: nowrap | wrap | wrap-reverse;/*
	Определяем переносятся ли объекты на новую строку (колонку)*/
		
		
	flex-flow: <‘flex-direction’> || <‘flex-wrap’>;/*
	Это сокращение для flex-direction и flex-wrap свойств
	Например:
	flex-flow: wrap column; */
		
		
	justify-content: flex-start | flex-end | center | space-between | space-around |
	space-evenly | start | end | left | right ... + safe | unsafe;/*
	Это свойство определяет выравнивание вдоль главной оси.
	Обратить внимание на поддержку браузерами */
		
		
	align-items: stretch | flex-start | flex-end | center | baseline | first baseline |
	last baseline | start | end | self-start | self-end + ... safe | unsafe;/*
	Это свойство определяет поведение по умолчанию того, как flex элементы
	располагаются вдоль поперечной оси на текущей линии.*/
	
	
		align-content: flex-start | flex-end | center | space-between | space-around | 
	space-evenly | stretch | start | end | baseline | first baseline | last baseline + 
	... safe | unsafe;/*
	Это свойство выравнивает линии в пределах flex контейнера, когда есть
	дополнительное пространство на поперечной оси, подобно тому, как justify-content
	выравнивает отдельные элементы в пределах главной оси.*/
	
}


----------------| Свойства для первых дочерних элементов(flex элементы) |----------------
.item {
	
	order: <integer>; /* default is 0 
	Определяет позицию этого элемента по счёту
	.box :nth-child(1) { order: 2; }
    .box :nth-child(2) { order: 3; }
    .box :nth-child(3) { order: 1; }
    .box :nth-child(4) { order: 3; }
    .box :nth-child(5) { order: 1; }*/
		
		
	flex-grow: <number>; /* default 0
	Это свойство определяет способность flex элемента растягиваться в случае
	необходимости.
	flex-grow: 2; Будет занимать в 2 раза больше места чем эл-ты  с параметром 1*/
		
		
	flex-shrink: <number>; /* default 1
	Это свойство определяет способность flex элемента растягиваться в случае
	необходимости.
	flex-shrink: 2; Будет занимать в 2 раза меньше места чем эл-ты  с параметром 1 */
		
		
	flex-basis: <length> | auto; /* default auto 
	Это свойство определяет размер элемента по умолчанию перед распределением 
	оставшегося пространства.*/
	
	
	flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]; /*
	Это сокращение для использования flex-grow, flex-shrink и flex-basis вместе.*/
	
	align-self: auto | flex-start | flex-end | center | baseline | stretch;/*
	Это свойство позволяет переопределить выравнивание по умолчанию (или указанное с
	помощью align-items) для отдельных элементов flex.*/
}



-----|  |-----
-----<  >-----





_________________________________________________________________________________________

---------------------------------||| display: grid |||-----------------------------------
#grid

---------------------------------| Родительский элемент |--------------------------------

display: grid;

/*Разобьём на 25 одинаковых ячеек*/
grid-template-columns: 20% 20% 20% 20% 20%;
grid-template-rows: 20% 20% 20% 20% 20%;

grid-template-columns: repeat(5, 20%); /*Удобное описание одинаковых елементов*/
grid-template-columns: 100px 3em 40%; /*можно комбинировать значения*/
grid-template-columns: 1fr 3fr; /*Первый элемент займет ¼, а второй оставшиеся ¾ пространства.*/
grid-template-columns: 50px auto 50px;

grid-template-rows: 200px 20em 1fr; /*Работает также как и grid-template-columns*/

/*Сокращёный вариант*/
grid-template: 50% 50% / 200px /*создаст grid-сетку с двумя строками по 50% каждая и одним столбцом шириной 200 пикселей.*/

------------------------------------| Дочерний элемент |---------------------------------

grid-column-start: 2;
grid-column-end: 4;
grid-column: 2 / 4;
grid-column: 2 / span 3 /*Занять 3 ячейки со второй вертикали.*/
grid-row-start: 2;  /*Начать со 2 горизонтали*/
grid-row-end: span 4; /*Занять 4 ячейки*/
grid-row: 1 / 4;
grid-row: 1 / span 3; /*Занять 3 ячейки с первой горизонтали.*/

grid-area: grid-row-start /grid-column-start / grid-row-end / grid-column-end;
grid-area: 1 / 2 / span 3 / 4;


order: 0;

------------------------------------------|  |-------------------------------------------
------------------------------------------<  >-------------------------------------------
_________________________________________________________________________________________

----------------------------------------|||  |||-----------------------------------------
------------------------------------------|  |-------------------------------------------
------------------------------------------<  >-------------------------------------------
_________________________________________________________________________________________

----------------------------------------|||  |||-----------------------------------------
------------------------------------------|  |-------------------------------------------
------------------------------------------<  >-------------------------------------------