ReactJS

---------------|||  Установка  |||--------------

Скачаем node.js установочник с сайта nodejs.org
Установливаем его в систему.

В консоли в общей папке с проектами:
npx create-react-app name-app //Создаст папку name-app и там создаст проект

В консоли в папке проекта:
npx create-react-app . //Создаст проект прям в этой папке 

В папке проекта:
npm start //Запускается nodejs сервер

Сервер запустится по адресу:
http://localhost:3000/

npm install //Устанавливает зависимости описанные в package.json в node-modules,
обновляет ранее установленные.


-------<  Расширения VS Code  >--------
//Auto import - автоматически добавляет строчку импорта при добавлении компонента


--------------------------------------<  Ссылки  >---------------------------------------
//Репозиторий проекта:
//https://github.com/it-kamasutra/react-way-of-samurai/tree/master/src

//Введение в React:
//https://habr.com/ru/post/461541

//Введение в Redux & React-redux
//https://habr.com/ru/post/498860/

//Рисовать диаграмы:
//https://app.diagrams.net/


_________________________________________________________________________________________

----------------------------------|||  Элементы  |||-------------------------------------
#elements React Element


-------------------------------------< Children >----------------------------------------
#children

//Простой пример:
function Chill(props) {
        return <h1>Hello {props.children}</h1>
}

ReactDom.render(<Chill>Mike</Chill>, element); // Hello Mike


//Методы
React.Children.map //создаёт новый массив с результатом вызова указанной функции для каждого элемента массива;
React.Children.forEach //выполняет указанную функцию один раз для каждого элемента в массиве;
React.Children.count //возвращает общее количество компонентов в children;
React.Children.only //если у children есть только один потомок (React элемент), то возвращает его иначе выдаёт ошибку;
React.Children.toArray //возвращает массива из children с ключами, заданные каждому дочернему элементу


_________________________________________________________________________________________

----------------------------------|||  Компоненты  |||-----------------------------------

Пример:
-------<  index.js  >--------

ReactDOM.render(
  <React.StrictMode>
    <App />  //Определяет расположение компонента
  </React.StrictMode>,
  document.getElementById('root')
);

-------------------------------------<  App.js  >----------------------------------------
import './App.css';

const App = () => { 
  return ( //Возвращаем JSX разметку
    <div className="App">
      Test page
    </div>
  );
}

export default App;


-------------------------------<  Классовые компоненты  >--------------------------------

import React from 'react';

export class ComponentName extends React.Component {
	state = { //Свойство
		count: 0, // начальное значение }
	}; 
	
	methodName = () => {...} //Метод
	
	updateCount = () => { const { count } = this.state; // деструктуризация стейта 
		this.setState({ count: count + 1 }); 
	};
	
	render() { //Отрисовка 
		return (
			<div>
				<span className="counter">{this.state.count}</span>
				<button className="counter-button" onClick={this.updateCount}> 
					Click! 
				</button>
			</div>
		)
	}
}



---------------------<  Импорт компонентов из других файлов  >-----------------------
#import

import React from 'react'; //Импорт из модуля

import App from './App'; /*импорт компонента App из файла App.jsx помеченным 
export default App...*/

import {addUser} from './User'//импорт объекта из файла помеченным: export addUser...

import './App.css'; //Импорт стилей
import style from './Component.css'; //Импорт стилей как объекта.
<div className = {style.navbar}></div> //Присвоение класса стилей элементу из объекта style



component.jsx //Файлы компонента могут имень расширение .jsx

----------------------------<  Методы жизненного цикла  >--------------------------------
#useEffect
	
//В функциональных компонентах:
export function Example(props) { 
	const { name } = props.name;
	
	useEffect(() => { 
		console.log('useEffect');  //Выполнится при изменении name
	}, [name]);
	/* Коллбэк useEffect будет выполнен:
	1. При монтировании компонента 
	2. При изменении одной из зависимостей из массива
	*/
	
	useEffect(() => { 
		console.log('useEffect');  //Выполнится при монтировании
	}, []);
	
	useEffect(() => { 
		console.log('useEffect');  //Выполнится при любом изменении.
	});
	
	/*Если из коллбэка useEffect вернуть функцию, то она будет вызвана на этапе размонтирования компонента:*/
	useEffect(() => { 
		return () => { console.log('like willUnmount') } //При размонтировании
		}, []);
	
	return ( <div> {name} </div> )}
	
/*Из useEffect можно вернуть только функцию. Т.к. функции, объявленные с помощью async, всегда неявно возвращают промис, то коллбэк useEffect объявлять async нельзя. Вместо этого можно объявить отдельную асинхронную функцию и вызвать ее внутри useEffect.*/



//Для классовых компонентов
export class Counter extends React.Component { 
	constructor(props) { 
		super(props); 
		console.log('constructor'); 
	}
	
	componentDidMount() { 
		console.log('commponentDidMount'); 
		// Dspsdftncz на начальном этапе, после constructor() и render()
		/*В этом методе, как правило, запускаются побочные эффекты компонента - отправляются запросы на сервер, ставятся таймеры, подписки и т.п.*/
	}
	
	componentDidUpdate() {
		console.log('componentDidUpdate'); 
		//Вызывается при обновлении компонента (New props, setState() forseUpdate())
		//После render()
	}
	
	componentWillUnmount() {
		/*При размонтировании компонента. Он служит в первую очередь для отмены ранее отправленных в компоненте запросов, таймеров, подписок и т.п. Это позволяет избежать утечек памяти.*/
	}
	render() {<>...</>}
	
	
	
_________________________________________________________________________________________

----------------------------------|||  Хуки React |||------------------------------------

------------------------------------<  useState  >---------------------------------------
#useState рассмотрен в разделе State

------------------------------------<  useEffect >---------------------------------------
#useEffect рассмотрен < Методы жизненного цикла >

-----------------------------------<  useCallback  >-------------------------------------
#useCallback - используется для оборачивания функций, объявленных в теле функционального компонента.

const changeCount = useCallback(() => { 
	setCount(1);
}, []);
/*Функция, обернутая в useCallback, “запоминается” и будет пересоздаваться только в случае изменения любой из зависимостей - переменных, указанных в массиве, переданным вторым аргументом. Как правило, useCallback используют для функций, которые: а. Передаются пропсами другому компоненту б. Используются в других хуках в том же компоненте*/
-------------------------------------<  useMemo  >---------------------------------------
#useMemo 

/*служит для мемоизации значений. К примеру, если в компоненте используется результат вычисления достаточно “тяжелой” функции (проход по массиву и т.п.), имеет смысл обернуть это вычисление в useMemo, чтобы не выполнять его на каждом рендере.*/

// будет выполняться только на первом рендере, а затем при изменении одной из зависимостей

//возвращает результат вычисления переданной функции.

const elem = useMemo( () => props.hugeArray.find(el => el.show), [props.hugeArray] );


--------------------------------------<  useRef  >---------------------------------------
#useRef

/*возвращает специальный объект с мутируемым свойством current. Зачастую используется для получения ссылки на DOM-элемент*/

export function Example(props) { 
	const elem = useRef(null); 
	return ( <div ref={elem}> Refs </div> )}
	
	
/*Для корректной работы с хуками следует соблюдать следующие правила: 
1. Хуки должны вызываться только из функциональных компонентов на верхнем уровне (не из вложенных функций) или из других хуков. 
2. Внутри функционального компонента хуки должны вызываться всегда в одном и том же порядке. То есть, нельзя оборачивать вызов хука в условия или циклы, а также после
условного return. Для реализации работы хуков React отслеживает порядок их вызовов в компоненте, и нарушение этого порядка вызовет ошибку. 
3. Указывайте в зависимостях хуков все переменные и пропсы, которые используются в коллбэке хука, в том числе и те, которые созданы с помощью других хуков. Исключение составляют переменные, объявленные вне тела компонента, а также функция-сеттер, возвращаемая из useState.*/
_________________________________________________________________________________________

----------------------------------|||  Стили  |||----------------------------------------
#стили #style


//Импорт из файла стилей:
import './App.css';
... return <header className="App-header">


//Импорт в объект
import style from './App.css'
... return <header className={style.app-header}>


//Inline style
<div style={{paddingTop: '25px'}}> //не стоит применять
//все значени кроме чистых цифр в кавычках


//Использование css и less по умолчанию.
//Для использования sass необходимо:
npm install node-sass --save


------------------------------------<  Модули  >-----------------------------------------
#стили #модули #module

// Создаём файл стиля рядом с js файлом компонента
Header.js
Header.module.css

// Настраиваем импорт:
import style from "./Profile.module.css";

//Применяем:
<div className={style.logo}
<div className={`${style.logo} ${style.hover}`} // Несколько классов
// Классы .logo и .hover в файле Header.module.css


-------<    >--------






_________________________________________________________________________________________

--------------------------------|||  Роутинг. Роуты. |||---------------------------------

//Устанавливаем пакет
npm install react-router-dom


-------<    >--------
import { BrowserRouter, Route, Routes } from 'react-router-dom';

<BrowserRouter>
...
    <Routes>
		<Route  exact path="/dialogs" element={<Dialogs />} />
		//exact - только точное совпадение пути. Без '/dialogs/id3445'
		<Route path="/profile" element={<Profile />} />
		
		<Route path="/profile" element={<Profile img='./img/12123.jpg'/>} /> //Props
    </Routes>
...           
</BrowserRouter>




-------<    >--------


_________________________________________________________________________________________

------------------------|||  Взаимодействие с компонентом  |||---------------------------
#onClick #ref

------------------------------------<  onClick  >----------------------------------------
#onClick

<button onClick={() => console.log('клик')}>

const click = () => console.log('клик');
<button onClick={ click }>



---------------------------------------<  Ref  >-----------------------------------------
#ref

/*Рефы дают возможность получить доступ к DOM-узлам или React-элементам, созданным в рендер-методе или функциональном компоненте.*/

//     !!! Не злоупотреблять применнением Ref !!!


const MyComponent...{
...
const textInput = React.createRef();//Создание ссылки

let logText =() => {
		let text = myRef.current.value; //Использование ссылки
		console.log(text);
}

return (
	...
	<textarea ref={ textInput } ></textarea>;//Элемент для которого нужна ссылка
	...
	<button onClick={ logText }>Logging text</button>
	) 
}
	
	
/*Коллбэк useEffect будет выполняться на каждом рендере, включая самый первый (на стадии монтирования). Однако, нам может быть необходимо выполнять данный колбэк именно при обновлении, но не при монтировании компонента. Для этого можно использовать флаг, установленный с помощью рефа:*/	
const isFirstRender = useRef(true); 
useEffect(() => { 
	if (!isFirstRender) { 
		console.log("Будет выполняться каждый раз кроме первого"); 
	} 
}); 
useEffect(() => { isFirstRender.current = false;});
	
	
_________________________________________________________________________________________

----------------------------------|||  State  |||----------------------------------------
#state #useState

import React, { useState } from 'react';

export function Counter() {
	 //Создаём свойства через деструктуризацию.
	const [count, setCount] = useState(0); //count == 0
	
	const updateCount = () => { 
		setCount(count + 1); // меняем значение count функцией сеттером
	}
	
	const updateCount1 = () => { 
		setCount( (prevCount) => prevCount + 1) ; //Можно с коллбэком
	}	/*В этом случае аргументом в коллбэк будет передано (автоматически) предыдущее
	значение переменной (в данном случае count), а вернуть из функции требуется новое
	значение.*/
		
	return ( 
		<div> 
			<span className="counter">{count}</span> 
			<button className="counter-button" onClick={updateCount}>+1</button> 
		</div>
		)
}


-------<    >--------
-------<    >--------
	
	
_________________________________________________________________________________________

------------------------------------|||  Props |||---------------------------------------



-----------------------------<  Передача state через пропсы  >---------------------------

function Child(props) { 
	return (
		<span>{props.count}</span> //Значение хранится в родительском компоненте Example
	)
}

function Button(props) { 
	return ( 
		<div className="button" onClick={props.onClick}>Click!</div> 
	)
}

export function Example() { 
	const [count, setCount] = useState(0);  
	
	const changeCount = () => { 
		setCount(prevCount => prevCount + 1); 
	}
	
	return ( 
		<div> <Child number={count} /> //Передача значения стейта
		<Button onClick={changeCount} /> </div> //Передача коллбэка для изменения стейта
	)
}

-----------------------------------------<  Свойство key  >------------------------------
#key
/*Реакт использует его, чтобы определить, какие элементы не изменились - если при обновлении компонента key остался неизменным, элемент не будет размонтирован и смонтирован заново, а только обновится.*/
/*Свойство key используется, в основном, при рендере списков. Оно должно быть уникальным внутри данного списка - обычно используются id элементов массива.*/

export function MessagesList() { 
	const [messages, setMessages] = useState([ 
		{id: 'id1', text: "message 1"}, 
		{id: 'id2', text: "message 2"}, 
		{id: 'id3', text: "message 2"}, ]
	); 
	return messages.map((message) => <div key={message.id}>{message.text}</div>); }
	//При изменении одного элемента обновится только этот элемент, с текущим id



_________________________________________________________________________________________

-----------------------------------|||  Redux  |||---------------------------------------
 #store #dispatch #reducer #redux

npm install --save

-------<    >--------
-------<    >--------






_________________________________________________________________________________________

----------------------------------|||  Material UI  |||----------------------------------

//Библиотека готовых компонентов. Также существуют AntDesign, React-Bootstrap

//Сайт:
https://mui.com/getting-started/usage/

//Установка
npm install @material-ui/core --save



------------------------------<  Пример использования  >---------------------------------

import { TextField } from "@material-ui/core"; 
import { useState, useCallback } from "react"; 
export default function Example() { 
	const [value, setValue] = useState(""); 
	const handleChange = useCallback((e) => {setValue(e.target.value); }, []); 
	return ( <TextField 
		style={{ margin: '20px' }} 
		id="outlined-basic" 
		label="Outlined" 
		variant="outlined" 
		value={value} 
		onChange={handleChange} 
		/> 
	); 
}


---------------------------------<  Темы Material UI  >----------------------------------

/*Помимо готовых компонентов, Material UI также предоставляет возможность “темизации” вашего приложения - создания темы, то есть палитры цветов, которые будут использоваться компонентами Material UI, и применения этой темы.*/

import { 
	ThemeProvider, 
	useTheme, 
	createMuiTheme, 
	} from "@material-ui/core/styles";
 const theme = createMuiTheme({ 
	palette: { 
		primary: { main: "#FF9800" },
		secondary: { main: "#0098FF" },
	}, /* обязательно должен быть создан с использованием функции createMuiTheme и иметь как минимум свойство pallete.primary.main*/
});

/*Применить тему к приложению - для этого требуется обернуть корневой компонент вашего приложения в ThemeProvider*/

export default function Example() { 
	const [value, setValue] = useState(""); 
	const handleChange = useCallback((e) => { setValue(e.target.value); }, []); 
	return ( 
		<ThemeProvider theme={theme}> 
			<TextField 
				style={{ margin: "20px" }} 
				id="outlined-basic" 
				label="Outlined" 
				variant="outlined" 
				value={value} 
				onChange={handleChange} 
			/>
			<SomeNestedChild /> 
			<Fab variant="extended">Click</Fab> 
		</ThemeProvider> 
	); 
}

/*Получить объект темы в компоненте, используя хук useTheme:*/
function SomeNestedChild() { 
	const theme = useTheme(); 
	return ( 
		<Button style={{ 
			backgroundColor: theme.palette.primary.main, 
			borderColor: theme.palette.secondary.main, 
			}}> 
			Text 
		</Button> 
	); 
}


----------------------------< makeStyles и createStyles >--------------------------------
//Компоненты можно удобно “подключать” к теме, используя функции makeStyles и createStyles.

const useStyles = makeStyles((theme) => createStyles({ 
	root: { backgroundColor: theme.palette.primary.main }
})); 

export default function Example() { 
	const classes = useStyles(); 
	return ( <header className={classes.root}>Header</header> ); 
}





_________________________________________________________________________________________

--------------------------------|||  Баги Дебаггер  |||----------------------------------
#bag #debugger 

debugger;

При нажатии на кнопку перезагружается страница
event.preventDefault();
 
-------------------------------------<  Отладка  >---------------------------------------
React Devtools

Для облегчения работы с приложением и его отладки существует специальное расширение для Chrome - React Devtools  из магазина расширений Chrome.






-------<    >--------



_________________________________________________________________________________________

------------------------------|||  Статическая типизация  |||----------------------------
/*По мере того, как ваше приложение растёт, вы можете обнаружить множество ошибок с помощью проверки типов. Для некоторых приложений вы можете использовать расширения JavaScript, такие как Flow или TypeScript для проверки типов по всему вашему приложению. Но даже если вы не используете их, React имеет некоторые встроенные возможности проверки типов. Чтобы запустить проверку типов свойствах в компоненте, вы можете присвоить специальное свойство propTypes:*/

--------------------------------------<  PropTypes  >------------------------------------
import PropTypes from 'prop-types';

class Greeting extends React.Component {
  render() {
    return (
      <h1>Привет, {this.props.name}</h1>
    );
  }
}

Greeting.propTypes = {
  name: PropTypes.string
};


MyComponent.propTypes = {
  // Вы можете объявить, что свойство — это конкретный тип JS. По умолчанию все
  // они необязательны
  optionalArray: PropTypes.array,
  optionalBool: PropTypes.bool,
  optionalFunc: PropTypes.func,
  optionalNumber: PropTypes.number,
  optionalObject: PropTypes.object,
  optionalString: PropTypes.string,
  optionalSymbol: PropTypes.symbol,

  // Все, что можно отрисовать: числа, строки, элементы или массив
  // (или фрагмент), содержащий эти типы
  optionalNode: PropTypes.node,

  // React-элемент.
  optionalElement: PropTypes.element,

  // Вы также можете объявить, что свойство — экземпляр класса. Будет
  // использоваться JS-оператор instanceof.
  optionalMessage: PropTypes.instanceOf(Message),

  // Вы можете гарантировать, что ваше свойство была ограничена конкретными значениями,
  // которые рассматриваются в виде перечисления
  optionalEnum: PropTypes.oneOf(['News', 'Photos']),

  // Объект, который может быть один из разных типов
  optionalUnion: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.number,
    PropTypes.instanceOf(Message)
  ]),

  // Массив определённого типа
  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),

  // Объект со значениями свойств определённого типа
  optionalObjectOf: PropTypes.objectOf(PropTypes.number),

  // Объект с определённой структорой
  optionalObjectWithShape: PropTypes.shape({
    color: PropTypes.string,
    fontSize: PropTypes.number
  }),

  // Вы можете добавить к любому из вышеперечисленных значений `isRequired`
  // чтобы показать предупреждение, если свойство не предоставлено
  requiredFunc: PropTypes.func.isRequired,

  // Значение любого типа данных
  requiredAny: PropTypes.any.isRequired,

  // Также можно указать пользовательский валидатор. Он должен вернуть объект Error
  // при неудачной валидации. Не используйте `console.warn` или throw, поскольку
  // это не будет работать внутри `oneOfType`.
  customProp: function(props, propName, componentName) {
    if (!/matchme/.test(props[propName])) {
      return new Error(
        'Некорректное свойство `' + propName + '` передано в компонент' +
        ' `' + componentName + '`. Валидация прошла неудачно.'
      );
    }
  },

  // Также можно указать пользовательский валидатор для `arrayOf` или `objectOf`.
  // Он должен вернуть объект Error, если валидация потерпела неудачу. Валидатор
  // будет вызван для каждого ключа в массиве или объекте. Первые два аргумента
  // валидатора — сам массив или объект, и
  // текущий ключ элемента.
  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {
    if (!/matchme/.test(propValue[key])) {
      return new Error(
        'Некорректное свойство `' + propFullName + '` передано в компонент' +
        ' `' + componentName + '`. Валидация прошла неудачно.'
      );
    }
  })
};



-----------------------------------------<  TypeScript  >--------------------------------
#typescript

//https://www.youtube.com/watch?v=92qcfeWxtnY&t=680s

//типичный компонент на TypeScript:
import * as React from 'react'

export interface StandardComponentProps { //интерфейс для пропсов
  title?: string //? - необязательный параметр. Может отсутствовать
  children: React.ReactNode | React.ReactChaild //Разрешает присутствие дочерних эл-тов
}

export function StandardComponent({ children, title = 'Dr.' }: StandardComponentProps) {
  return (
    <div>
      {title}: {children}
	  <button onClick
    </div>
  )
}

--------------------------------< Обработка событий >------------------------------------
export interface EventHandlerProps {
  onClick: (e: React.MouseEvent) => void
}

export function EventHandler({ onClick }: EventHandlerProps) {

  function onFocus(e: React.FocusEvent) {
    console.log('Focused!', e.currentTarget)
  }

  return (
    <button
      onClick={onClick}
      onFocus={onFocus}
      onKeyDown={e => {
      /*При использовании встроенной функции нам предоставляется соответствующая сигнатура аргумента*/
      }}
    >
      Click me!
    </button>
  )
}



------------------------------------< Дженерики >----------------------------------------

_________________________________________________________________________________________

-----------------------------------|||  Справка  |||-------------------------------------

------------------------------<  Деструктуризация  >-----------------------------

//МАССИВ
Деструктуризация массива (англ. array destructuring) — это особый синтаксис, позволяющий извлекать значения из массива и записывать их в новые переменные с минимумом кода.


const profile = ["Oluwatobi", "Sofela", "codesweetly.com"];
const [firstName, lastName, website] = profile;


const [firstName, lastName, website] = [ //Деструктуризация массива напрямую
  "Oluwatobi", 
  "Sofela", 
  "codesweetly.com"
];
console.log(firstName); // "Oluwatobi"

//ОБЪЕКТ
Деструктуризацию можно использовать и с объектами. При этом мы указываем, какие свойства в какие переменные должны «идти».

let {var1, var2} = {var1: …, var2: …};


let options = {title: "Меню", width: 100, height: 200};
let {title, width, height} = options;
alert(title);  // Меню


-------------------------------<  Контролируемые формы  >--------------------------------

export function Counter() { 
	const [value, setValue] = useState(''); 
	
	const handleChange = (event) => { 
		setValue(event.target.value); //Передаёт значение сработавшего элемента
		}
		
	return ( 
		<div> 
			<input type="text" value={value} onChange={handleChange} /> 
		</div> 
	)
}



_________________________________________________________________________________________

---------------------------------------|||    |||----------------------------------------
-----------------------------------------<    >--------
-----------------------------------------<    >--------_________________________________________________________________________________________

---------------------------------------|||    |||----------------------------------------
-----------------------------------------<    >--------
-----------------------------------------<    >--------_________________________________________________________________________________________

---------------------------------------|||    |||----------------------------------------
-----------------------------------------<    >--------
-----------------------------------------<    >--------_________________________________________________________________________________________

---------------------------------------|||    |||----------------------------------------
-----------------------------------------<    >--------
-----------------------------------------<    >--------_________________________________________________________________________________________

---------------------------------------|||    |||----------------------------------------
-----------------------------------------<    >--------
-----------------------------------------<    >--------